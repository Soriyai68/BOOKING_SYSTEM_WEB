<template>
  <div class="create-seat">
    <!-- Page Header -->
    <div class="page-header">
      <h2>{{ $t("seats.addSeat") }}</h2>
      <el-button @click="$router.back()">
        <el-icon><ArrowLeft /></el-icon>
        {{ $t("actions.back") }}
      </el-button>
    </div>

    <!-- Seat Form -->
    <el-card>
      <el-form ref="formRef" :model="form" :rules="rules" label-width="140px">
        <!-- Theater (Display Only) -->
        <el-form-item :label="$t('theaters.title')">
          <el-input
            v-model="selectedTheaterName"
            placeholder="Theater will auto-show based on Hall"
            readonly
          />
        </el-form-item>

        <!-- Hall -->
        <el-form-item :label="$t('halls.title')" prop="hall_id">
          <el-select
            v-model="form.hall_id"
            placeholder="Select Hall"
            clearable
            filterable
            :disabled="halls.length === 0"
            :loading="loadingHalls"
            @change="handleHallChange"
          >
            <el-option
              v-for="hall in halls"
              :key="hall.id"
              :label="hall.hall_name"
              :value="hall.id"
            />
          </el-select>
        </el-form-item>

        <!-- Row -->
        <el-form-item :label="$t('seats.row')" prop="row">
          <el-input
            v-model="form.row"
            maxlength="5"
            show-word-limit
            @input="form.row = form.row.toUpperCase()"
          />
        </el-form-item>

        <!-- Seat Number -->
        <el-form-item :label="$t('seats.seatNumber')" prop="seat_number">
          <el-input
            v-model="form.seat_number"
            maxlength="10"
            show-word-limit
            @input="
              form.seat_number = form.seat_number.toString().toUpperCase()
            "
          />
        </el-form-item>

        <!-- Seat Type -->
        <el-form-item :label="$t('seats.type')" prop="seat_type">
          <el-select v-model="form.seat_type" style="width: 100%">
            <el-option
              v-for="type in seatTypes"
              :key="type.value"
              :label="$t(`seats.types.${type.value}`)"
              :value="type.value"
            />
          </el-select>
        </el-form-item>

        <!-- Status -->
        <el-form-item :label="$t('seats.status')" prop="status">
          <el-select v-model="form.status" style="width: 100%">
            <el-option
              v-for="status in seatStatuses"
              :key="status.value"
              :label="$t(`seats.statuses.${status.value}`)"
              :value="status.value"
            />
          </el-select>
        </el-form-item>

        <!-- Price -->
        <el-form-item :label="$t('seats.price')" prop="price">
          <el-input-number
            v-model="form.price"
            :min="0"
            :max="9999"
            :precision="2"
            style="width: 100%"
          />
        </el-form-item>

        <!-- Notes -->
        <el-form-item :label="$t('seats.notes')" prop="notes">
          <el-input
            v-model="form.notes"
            type="textarea"
            :rows="3"
            maxlength="500"
            show-word-limit
          />
        </el-form-item>

        <!-- Form Actions -->
        <el-form-item>
          <el-button type="primary" :loading="loading" @click="handleSubmit">
            {{ $t("actions.submit") }}
          </el-button>
          <el-button @click="resetForm">
            {{ $t("actions.reset") }}
          </el-button>
        </el-form-item>
      </el-form>
    </el-card>
  </div>
</template>

<script setup>
import { ref, reactive, onMounted } from "vue";
import { useRouter } from "vue-router";
import { useI18n } from "vue-i18n";
import { ElMessage } from "element-plus";
import { seatService } from "@/services/seatService";
import { hallService } from "@/services/hallService";
import { theaterService } from "@/services/theaterService";
import { useAppStore } from "@/stores/app";
import { ArrowLeft } from "@element-plus/icons-vue";

const { t } = useI18n();
const router = useRouter();
const appStore = useAppStore();

const formRef = ref();
const loading = ref(false);

const form = reactive({
  hall_id: "",
  row: "",
  seat_number: "",
  seat_type: "regular",
  status: "active",
  price: 0,
  notes: "",
});

// To show theater name based on selected hall
const selectedTheaterName = ref("");

const halls = ref([]);
const theaters = ref([]);
const loadingHalls = ref(false);
const loadingTheaters = ref(false);

const seatTypes = ref([
  { value: "regular", label: "Regular" },
  { value: "vip", label: "VIP" },
  { value: "couple", label: "Couple" },
  { value: "queen", label: "Queen" },
]);

const seatStatuses = ref([
  { value: "active", label: "Active" },
  { value: "maintenance", label: "Maintenance" },
  { value: "out_of_order", label: "Out of Order" },
  { value: "reserved", label: "Reserved" },
]);

const rules = {
  hall_id: [
    { required: true, message: t("validation.required"), trigger: "change" },
  ],
  row: [
    { required: true, message: t("validation.required"), trigger: "blur" },
    { min: 1, max: 5, message: "Row must be 1-5 chars", trigger: "blur" },
    {
      pattern: /^[A-Z][A-Z0-9]*$/,
      message: "Row must start with a letter",
      trigger: "blur",
    },
  ],
  seat_number: [
    { required: true, message: t("validation.required"), trigger: "blur" },
    {
      min: 1,
      max: 10,
      message: "Seat number must be 1-10 chars",
      trigger: "blur",
    },
    {
      pattern: /^[A-Z0-9]+$/,
      message: "Seat number must contain only letters/numbers",
      trigger: "blur",
    },
  ],
  seat_type: [
    { required: true, message: t("validation.required"), trigger: "change" },
  ],
  status: [
    { required: true, message: t("validation.required"), trigger: "change" },
  ],
  price: [
    { type: "number", min: 0, message: "Price must >= 0", trigger: "blur" },
  ],
};

// Load halls with theater info
const loadHalls = async () => {
  loadingHalls.value = true;
  try {
    const response = await hallService.getHalls({ per_page: 100 });
    halls.value = response.data;
  } catch (error) {
    console.error("Failed to load halls:", error);
    ElMessage.error(t("halls.loadError"));
  } finally {
    loadingHalls.value = false;
  }
};
// Load theaters
const loadTheaters = async () => {
  loadingTheaters.value = true;
  try {
    const response = await theaterService.getTheaters({ per_page: 100 });
    theaters.value = response.data;
  } catch (error) {
    console.error("Failed to load theaters:", error);
    ElMessage.error(t("theaters.loadError"));
  } finally {
    loadingTheaters.value = false;
  }
};
// Update theater name based on selected hall
const handleHallChange = (hallId) => {
  const hall = halls.value.find((h) => h.id === hallId);
  if (hall) {
    const theater = theaters.value.find((t) => t.id === hall.theater_id);
    selectedTheaterName.value = theater?.name || "";
  } else {
    selectedTheaterName.value = "";
  }
};

// Submit seat
const handleSubmit = async () => {
  if (!formRef.value) return;

  try {
    await formRef.value.validate();
    loading.value = true;

    const payload = { ...form }; // only send hall_id + seat info
    await seatService.createSeat(payload);

    ElMessage.success(t("seats.createSuccess"));
    router.push("/admin/seats");
  } catch (error) {
    console.error("Create seat error:", error);
    ElMessage.error(error.response?.data?.message || t("seats.createError"));
  } finally {
    loading.value = false;
  }
};

// Reset form
const resetForm = () => {
  if (formRef.value) formRef.value.resetFields();
  Object.assign(form, {
    hall_id: "",
    row: "",
    seat_number: "",
    seat_type: "regular",
    status: "active",
    price: 0,
    notes: "",
  });
  selectedTheaterName.value = "";
};

onMounted(async () => {
  await loadHalls();
  await loadTheaters();

  appStore.setBreadcrumbs([
    { title: t("nav.dashboard"), path: "/admin/dashboard" },
    { title: t("seats.title"), path: "/admin/seats" },
    { title: t("seats.addSeat"), path: "/admin/seats/create" },
  ]);
});
</script>

<style scoped>
.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 24px;
}

.el-form {
  max-width: 640px;
}
</style>
